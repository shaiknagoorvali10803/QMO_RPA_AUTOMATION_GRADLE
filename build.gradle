plugins {
    id 'java'
}

group 'com.swacorp.rpa'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = 11
    targetCompatibility = 11
}

dependencies {
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.11.1'
    implementation group: 'io.cucumber', name: 'cucumber-testng', version: '7.11.1'
    implementation group: 'io.cucumber', name: 'cucumber-picocontainer', version: '7.11.1'
    implementation group: 'com.aventstack', name: 'extentreports', version: '3.1.5'
    implementation group: 'tech.grasshopper', name: 'extentreports-cucumber7-adapter', version: '1.10.1'
    implementation 'org.testng:testng:7.6.0'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.seleniumhq.selenium:selenium-java:4.6.0'
    implementation 'io.github.bonigarcia:webdrivermanager:5.3.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'com.opencsv', name: 'opencsv', version: '4.6'
    implementation group: 'joda-time', name: 'joda-time', version: '2.10.5'
    implementation group: 'com.google.guava', name: 'guava', version: '21.0'
    implementation group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.7'
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.1'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.1'
    implementation group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '4.1.1'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '4.4.3'
}

tasks.named('test') {
    useTestNG(){
        outputDirectory = file("${buildDir}/test-output")
        useDefaultListeners = true
        excludeGroups << System.getProperty("excludedGroups").toString()
        includeGroups << System.getProperty("includedGroups").toString()
        options {
            parallel = 'classes'
            threadCount = 1
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}
def cucumberOptions = ['--plugin', 'pretty',
                       '--plugin', 'html:target/cucumber-reports/cucumber-pretty.html',
                       '--plugin', 'json:target/HalBrands.json',
                       '--plugin',  'com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:Report',
                      '--glue', 'com.swacorp.rpa.stepdefinitions', 'src/test/resources/features',]

def cucumberTagExpression = ['--tags', '@Chrome']
def availableThreadCount = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
def cucumberThreadsOption = ['--threads', availableThreadCount.toString()]
def setParallel = "true"

task cucumber() {
    doFirst {
        getParameters;
    }
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
            systemProperty "cucumber.options", System.properties.getProperty("cucumber.options")
            systemProperty "parallel", System.properties.getProperty("parallel", setParallel)
            systemProperties(System.properties as Map<String, ?>)
            cucumberOptions.addAll(cucumberTagExpression)
            if (setParallel == "true") cucumberOptions.addAll(cucumberThreadsOption)
            args = cucumberOptions
        }
    }
}

task runInParallel() {
    group = 'Cucumber Parallel'
    description = 'Runs build in parallel if used'
    doLast {
        setParallel = "true"
    }
}

task neatGifTest() {
    group = 'Cucumber TagExpressions'
    description = 'Sets @NeatGifTest tests to be ran'
    doLast {
        cucumberTagExpression = ['--tags', '@Chrome']
    }
}

task getParameters {
    println "I'm in the test"
}

task gradleCommandLineExample() {
    group = 'Cucumber Help'
    description = '''Command Line Examples
-> [ENV] and [CucumberTagExpressions] tasks must be called before task [cucumber] !!!
-> gradlew clean build [ENV] [CucumberTagExpressions] cucumber
    *Example: gradlew clean build giphyEnv neatGifTest cucumber
    *Example Remote: gradlew clean build giphyEnv neatGifTest cucumber -DisRemote="true"
    *Parallel Example: gradlew clean build runInParallel giphyEnv neatGifTest cucumber"'''
}

//gradlew clean build runInParallel -Dcucumber.filter.tags="@InvalidCredentials" -DName=shaikNagoorvali -DbrowserName=chrome cucumber
